[{"C:\\Users\\Admin\\source\\repos\\QandA\\frontend\\src\\index.tsx":"1","C:\\Users\\Admin\\source\\repos\\QandA\\frontend\\src\\reportWebVitals.ts":"2","C:\\Users\\Admin\\source\\repos\\QandA\\frontend\\src\\App.tsx":"3","C:\\Users\\Admin\\source\\repos\\QandA\\frontend\\src\\Styles.ts":"4","C:\\Users\\Admin\\source\\repos\\QandA\\frontend\\src\\Store.ts":"5","C:\\Users\\Admin\\source\\repos\\QandA\\frontend\\src\\SearchPage.tsx":"6","C:\\Users\\Admin\\source\\repos\\QandA\\frontend\\src\\SignInPage.tsx":"7","C:\\Users\\Admin\\source\\repos\\QandA\\frontend\\src\\SignOutPage.tsx":"8","C:\\Users\\Admin\\source\\repos\\QandA\\frontend\\src\\Header.tsx":"9","C:\\Users\\Admin\\source\\repos\\QandA\\frontend\\src\\NotFoundPage.tsx":"10","C:\\Users\\Admin\\source\\repos\\QandA\\frontend\\src\\Auth.tsx":"11","C:\\Users\\Admin\\source\\repos\\QandA\\frontend\\src\\QuestionPage.tsx":"12","C:\\Users\\Admin\\source\\repos\\QandA\\frontend\\src\\AuthorizedPage.tsx":"13","C:\\Users\\Admin\\source\\repos\\QandA\\frontend\\src\\AskPage.tsx":"14","C:\\Users\\Admin\\source\\repos\\QandA\\frontend\\src\\HomePage.tsx":"15","C:\\Users\\Admin\\source\\repos\\QandA\\frontend\\src\\PageNumbers.tsx":"16","C:\\Users\\Admin\\source\\repos\\QandA\\frontend\\src\\QuestionsData.ts":"17","C:\\Users\\Admin\\source\\repos\\QandA\\frontend\\src\\AppSettings.ts":"18","C:\\Users\\Admin\\source\\repos\\QandA\\frontend\\src\\QuestionList.tsx":"19","C:\\Users\\Admin\\source\\repos\\QandA\\frontend\\src\\Page.tsx":"20","C:\\Users\\Admin\\source\\repos\\QandA\\frontend\\src\\Icons.tsx":"21","C:\\Users\\Admin\\source\\repos\\QandA\\frontend\\src\\Field.tsx":"22","C:\\Users\\Admin\\source\\repos\\QandA\\frontend\\src\\Form.tsx":"23","C:\\Users\\Admin\\source\\repos\\QandA\\frontend\\src\\AnswerList.tsx":"24","C:\\Users\\Admin\\source\\repos\\QandA\\frontend\\src\\PageTitle.tsx":"25","C:\\Users\\Admin\\source\\repos\\QandA\\frontend\\src\\http.ts":"26","C:\\Users\\Admin\\source\\repos\\QandA\\frontend\\src\\Question.tsx":"27","C:\\Users\\Admin\\source\\repos\\QandA\\frontend\\src\\Answer.tsx":"28"},{"size":501,"mtime":1609311046778,"results":"29","hashOfConfig":"30"},{"size":425,"mtime":499162500000,"results":"31","hashOfConfig":"30"},{"size":2760,"mtime":1611324611457,"results":"32","hashOfConfig":"30"},{"size":963,"mtime":1611039107885,"results":"33","hashOfConfig":"30"},{"size":9993,"mtime":1611325294982,"results":"34","hashOfConfig":"30"},{"size":1224,"mtime":1611039008278,"results":"35","hashOfConfig":"30"},{"size":475,"mtime":1611039094203,"results":"36","hashOfConfig":"30"},{"size":627,"mtime":1611039101387,"results":"37","hashOfConfig":"30"},{"size":3094,"mtime":1611232225074,"results":"38","hashOfConfig":"30"},{"size":126,"mtime":1609396501100,"results":"39","hashOfConfig":"30"},{"size":2493,"mtime":1611039047305,"results":"40","hashOfConfig":"30"},{"size":5597,"mtime":1611324874833,"results":"41","hashOfConfig":"30"},{"size":358,"mtime":1611039054457,"results":"42","hashOfConfig":"30"},{"size":2504,"mtime":1611324138608,"results":"43","hashOfConfig":"30"},{"size":9288,"mtime":1611324808279,"results":"44","hashOfConfig":"30"},{"size":1092,"mtime":1611324841773,"results":"45","hashOfConfig":"30"},{"size":4174,"mtime":1611045375825,"results":"46","hashOfConfig":"30"},{"size":343,"mtime":1611039039118,"results":"47","hashOfConfig":"30"},{"size":1109,"mtime":1611238060520,"results":"48","hashOfConfig":"30"},{"size":443,"mtime":1609312113003,"results":"49","hashOfConfig":"30"},{"size":282,"mtime":1609850396869,"results":"50","hashOfConfig":"30"},{"size":2784,"mtime":1611324625733,"results":"51","hashOfConfig":"30"},{"size":5338,"mtime":1611324667969,"results":"52","hashOfConfig":"30"},{"size":636,"mtime":1609396523879,"results":"53","hashOfConfig":"30"},{"size":193,"mtime":1609396495981,"results":"54","hashOfConfig":"30"},{"size":1285,"mtime":1611039116003,"results":"55","hashOfConfig":"30"},{"size":1289,"mtime":1609850181192,"results":"56","hashOfConfig":"30"},{"size":740,"mtime":1609396527650,"results":"57","hashOfConfig":"30"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},"18lb36s",{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"60"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},"C:\\Users\\Admin\\source\\repos\\QandA\\frontend\\src\\index.tsx",[],["117","118"],"C:\\Users\\Admin\\source\\repos\\QandA\\frontend\\src\\reportWebVitals.ts",[],"C:\\Users\\Admin\\source\\repos\\QandA\\frontend\\src\\App.tsx",[],"C:\\Users\\Admin\\source\\repos\\QandA\\frontend\\src\\Styles.ts",[],"C:\\Users\\Admin\\source\\repos\\QandA\\frontend\\src\\Store.ts",[],"C:\\Users\\Admin\\source\\repos\\QandA\\frontend\\src\\SearchPage.tsx",[],"C:\\Users\\Admin\\source\\repos\\QandA\\frontend\\src\\SignInPage.tsx",[],"C:\\Users\\Admin\\source\\repos\\QandA\\frontend\\src\\SignOutPage.tsx",[],"C:\\Users\\Admin\\source\\repos\\QandA\\frontend\\src\\Header.tsx",[],"C:\\Users\\Admin\\source\\repos\\QandA\\frontend\\src\\NotFoundPage.tsx",[],"C:\\Users\\Admin\\source\\repos\\QandA\\frontend\\src\\Auth.tsx",[],"C:\\Users\\Admin\\source\\repos\\QandA\\frontend\\src\\QuestionPage.tsx",[],"C:\\Users\\Admin\\source\\repos\\QandA\\frontend\\src\\AuthorizedPage.tsx",[],"C:\\Users\\Admin\\source\\repos\\QandA\\frontend\\src\\AskPage.tsx",[],"C:\\Users\\Admin\\source\\repos\\QandA\\frontend\\src\\HomePage.tsx",["119"],"import React, { ChangeEvent } from 'react';\nimport { connect } from 'react-redux';\nimport { ThunkDispatch } from 'redux-thunk';\nimport { AnyAction } from 'redux';\nimport { useEffect, useState, FC } from 'react';\n/** @jsxRuntime classic */\n/** @jsx jsx */\nimport { css, jsx } from '@emotion/react';\nimport { PrimaryButton } from './Styles';\nimport { QuestionList } from './QuestionList';\nimport { Page } from './Page';\nimport { PageTitle } from './PageTitle';\nimport { RouteComponentProps } from 'react-router-dom';\nimport {\n  AppState,\n  getUnansweredQuestionsActionCreator,\n  getAllQuestionsActionCreator,\n  getAnsweredQuestionsActionCreator,\n  sortQuestionsByNameAscCreator,\n  sortQuestionsByNameDescCreator,\n  sortQuestionsByDateDescCreator,\n  sortQuestionsByDateAscCreator,\n  setCountOfPagesActionCreator,\n} from './Store';\nimport { useAuth } from './Auth';\nimport { QuestionData } from './QuestionsData';\nimport arrowDown from './arrowDown.png';\nimport arrowUp from './arrowUp.png';\nimport PageNumbers from './PageNumbers';\n\ninterface RouteParams {\n  pageNumber?: string;\n}\n\ninterface Props extends RouteComponentProps<RouteParams> {\n  getUnansweredQuestions: () => Promise<void>;\n  questions: QuestionData[] | null;\n  questionsLoading: boolean;\n  countOfPages: number;\n  getAllQuestions: () => Promise<void>;\n  getAnsweredQuestions: () => Promise<void>;\n  sortQuestionsByNameDesc: () => Promise<void>;\n  sortQuestionsByNameAsc: () => Promise<void>;\n  sortQuestionsByDateDesc: () => Promise<void>;\n  sortQuestionsByDateAsc: () => Promise<void>;\n  setCountOfPagesAction: (countOfPages: number) => Promise<void>;\n}\n\nexport const HomePage: FC<Props> = ({\n  history,\n  questions,\n  questionsLoading,\n  match,\n  countOfPages,\n  getUnansweredQuestions,\n  getAllQuestions,\n  getAnsweredQuestions,\n  sortQuestionsByNameDesc,\n  sortQuestionsByNameAsc,\n  sortQuestionsByDateDesc,\n  sortQuestionsByDateAsc,\n  setCountOfPagesAction,\n}) => {\n  const [filterQuestionsMode, setFilterQuestionsMode] = useState('Unanswered');\n  const [batchOfQuestionsPerPage, setBatchOfQuestionsPerPage] = useState(\n    Infinity,\n  );\n  useEffect(() => {\n    if (questions == null && filterQuestionsMode === 'Unanswered') {\n      getUnansweredQuestions();\n    }\n    if (filterQuestionsMode === 'Unanswered') {\n      getUnansweredQuestions();\n    }\n\n    if (filterQuestionsMode === 'Answered') {\n      getAnsweredQuestions();\n    }\n    if (filterQuestionsMode === 'All') {\n      getAllQuestions();\n    }\n  }, [filterQuestionsMode]);\n\n  const handleAskQuestionClick = () => {\n    history.push('/ask');\n  };\n  const getCountOfPages = (questionsPerPage: number): number => {\n    if (questions != null) {\n      var questionsCount = questions?.length;\n      return Math.ceil(questionsCount / questionsPerPage);\n    }\n\n    return 0;\n  };\n  const handleSelectOfCountQuestionsPerPage = (\n    e: ChangeEvent<HTMLSelectElement>,\n  ) => {\n    if (e.currentTarget.value === 'Все') {\n      setBatchOfQuestionsPerPage(Infinity);\n      setCountOfPagesAction(1);\n      history.push('/1');\n    } else if (e.currentTarget.value === 'По 5') {\n      setBatchOfQuestionsPerPage(5);\n      setCountOfPagesAction(getCountOfPages(5));\n      history.push('/1');\n    } else if (e.currentTarget.value === 'По 10') {\n      setBatchOfQuestionsPerPage(10);\n      setCountOfPagesAction(getCountOfPages(10));\n      history.push('/1');\n    } else if (e.currentTarget.value === 'По 20') {\n      setBatchOfQuestionsPerPage(20);\n      setCountOfPagesAction(getCountOfPages(20));\n      history.push('/1');\n    } else if (e.currentTarget.value === 'По 50') {\n      setBatchOfQuestionsPerPage(50);\n      setCountOfPagesAction(getCountOfPages(50));\n      history.push('/1');\n    }\n  };\n\n  const { isAuthenticated } = useAuth();\n\n  const getPortionOfQuestions = (\n    page: string | undefined,\n  ): QuestionData[] | null => {\n    let pageNumber: number;\n\n    if (page !== undefined) {\n      pageNumber = parseInt(page, 10);\n\n      if (!isNaN(pageNumber)) {\n        if (pageNumber <= countOfPages && pageNumber >= 0) {\n          var portionOfQuestions = questions?.slice(\n            (pageNumber - 1) * batchOfQuestionsPerPage,\n            pageNumber * batchOfQuestionsPerPage,\n          );\n          if (portionOfQuestions !== undefined) {\n            return portionOfQuestions;\n          }\n\n          return null;\n        }\n      }\n    }\n\n    return null;\n  };\n  return (\n    <Page>\n      <div\n        css={css`\n          margin: 50px auto 20px auto;\n          padding: 30px 20px;\n          max-width: 600px;\n        `}\n      >\n        <div\n          css={css`\n            display: flex;\n            align-items: center;\n            justify-content: space-between;\n          `}\n        >\n          {filterQuestionsMode === 'All' && (\n            <PageTitle> All Questions </PageTitle>\n          )}\n\n          {filterQuestionsMode === 'Answered' && (\n            <PageTitle> Answered Questions </PageTitle>\n          )}\n\n          {filterQuestionsMode === 'Unanswered' && (\n            <PageTitle>Unanswered Questions </PageTitle>\n          )}\n\n          {isAuthenticated && (\n            <PrimaryButton onClick={handleAskQuestionClick}>\n              Ask a question\n            </PrimaryButton>\n          )}\n        </div>\n        <div\n          css={css`\n            margin: 10px auto 0px auto;\n            padding: 0px 0px 0px 0px;\n            max-width: 600px;\n          `}\n        >\n          <div\n            css={css`\n              display: flex;\n              align-items: center;\n              justify-content: space-between;\n            `}\n          >\n            <label>\n              Un\n              <input\n                type=\"radio\"\n                value=\"Unanswered\"\n                name=\"FilterQuestions\"\n                onClick={() => setFilterQuestionsMode('Unanswered')}\n                defaultChecked\n              />\n            </label>\n            <label>\n              An\n              <input\n                type=\"radio\"\n                value=\"Answered\"\n                name=\"FilterQuestions\"\n                onClick={() => setFilterQuestionsMode('Answered')}\n              />\n            </label>\n            <label>\n              All\n              <input\n                type=\"radio\"\n                value=\"All\"\n                name=\"FilterQuestions\"\n                onClick={() => setFilterQuestionsMode('All')}\n              />\n            </label>\n\n            <label>\n              By Name:{' '}\n              <button onClick={() => sortQuestionsByNameDesc()}>\n                <img src={arrowDown} alt=\"down arror\" width=\"20\" height=\"20\" />\n              </button>\n              <button onClick={() => sortQuestionsByNameAsc()}>\n                <img src={arrowUp} alt=\"down arror\" width=\"20\" height=\"20\" />\n              </button>\n            </label>\n            <label>\n              By Date:{' '}\n              <button onClick={() => sortQuestionsByDateDesc()}>\n                <img src={arrowDown} alt=\"down arror\" width=\"20\" height=\"20\" />\n              </button>\n              <button onClick={() => sortQuestionsByDateAsc()}>\n                <img src={arrowUp} alt=\"down arror\" width=\"20\" height=\"20\" />\n              </button>\n            </label>\n\n            <select onChange={handleSelectOfCountQuestionsPerPage}>\n              <option>Все</option>\n              <option>По 5</option>\n              <option>По 10</option>\n              <option>По 20</option>\n              <option>По 50</option>\n            </select>\n          </div>\n        </div>\n        {questionsLoading ? (\n          <div\n            css={css`\n              font-size: 16px;\n              font-style: italic;\n            `}\n          >\n            Loading\n          </div>\n        ) : (\n          <div>\n            {batchOfQuestionsPerPage === Infinity ? (\n              <QuestionList data={questions || []} />\n            ) : match.params.pageNumber === undefined ? (\n              <QuestionList data={getPortionOfQuestions('1') || []} />\n            ) : (\n              <QuestionList\n                data={getPortionOfQuestions(match.params.pageNumber) || []}\n              />\n            )}\n            <PageNumbers />\n          </div>\n        )}\n      </div>\n    </Page>\n  );\n};\n\nconst mapStateToProps = (store: AppState) => {\n  return {\n    questions: store.questions.unanswered,\n    questionsLoading: store.questions.loading,\n    countOfPages: store.questions.countOfPages,\n  };\n};\n\nconst mapDispatchToProps = (dispatch: ThunkDispatch<any, any, AnyAction>) => {\n  return {\n    getUnansweredQuestions: () =>\n      dispatch(getUnansweredQuestionsActionCreator()),\n    getAllQuestions: () => dispatch(getAllQuestionsActionCreator()),\n    getAnsweredQuestions: () => dispatch(getAnsweredQuestionsActionCreator()),\n    sortQuestionsByNameDesc: () => dispatch(sortQuestionsByNameDescCreator()),\n    sortQuestionsByNameAsc: () => dispatch(sortQuestionsByNameAscCreator()),\n    sortQuestionsByDateDesc: () => dispatch(sortQuestionsByDateDescCreator()),\n    sortQuestionsByDateAsc: () => dispatch(sortQuestionsByDateAscCreator()),\n    setCountOfPagesAction: (countOfPages: number) =>\n      dispatch(setCountOfPagesActionCreator(countOfPages)),\n  };\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(HomePage);\n","C:\\Users\\Admin\\source\\repos\\QandA\\frontend\\src\\PageNumbers.tsx",[],"C:\\Users\\Admin\\source\\repos\\QandA\\frontend\\src\\QuestionsData.ts",[],"C:\\Users\\Admin\\source\\repos\\QandA\\frontend\\src\\AppSettings.ts",[],"C:\\Users\\Admin\\source\\repos\\QandA\\frontend\\src\\QuestionList.tsx",[],"C:\\Users\\Admin\\source\\repos\\QandA\\frontend\\src\\Page.tsx",[],"C:\\Users\\Admin\\source\\repos\\QandA\\frontend\\src\\Icons.tsx",[],"C:\\Users\\Admin\\source\\repos\\QandA\\frontend\\src\\Field.tsx",[],"C:\\Users\\Admin\\source\\repos\\QandA\\frontend\\src\\Form.tsx",[],"C:\\Users\\Admin\\source\\repos\\QandA\\frontend\\src\\AnswerList.tsx",[],"C:\\Users\\Admin\\source\\repos\\QandA\\frontend\\src\\PageTitle.tsx",[],"C:\\Users\\Admin\\source\\repos\\QandA\\frontend\\src\\http.ts",[],"C:\\Users\\Admin\\source\\repos\\QandA\\frontend\\src\\Question.tsx",[],"C:\\Users\\Admin\\source\\repos\\QandA\\frontend\\src\\Answer.tsx",[],["120","121"],{"ruleId":"122","replacedBy":"123"},{"ruleId":"124","replacedBy":"125"},{"ruleId":"126","severity":1,"message":"127","line":82,"column":6,"nodeType":"128","endLine":82,"endColumn":27,"suggestions":"129"},{"ruleId":"122","replacedBy":"130"},{"ruleId":"124","replacedBy":"131"},"no-native-reassign",["132"],"no-negated-in-lhs",["133"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'getAllQuestions', 'getAnsweredQuestions', 'getUnansweredQuestions', and 'questions'. Either include them or remove the dependency array. If 'getUnansweredQuestions' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["134"],["132"],["133"],"no-global-assign","no-unsafe-negation",{"desc":"135","fix":"136"},"Update the dependencies array to be: [filterQuestionsMode, getAllQuestions, getAnsweredQuestions, getUnansweredQuestions, questions]",{"range":"137","text":"138"},[2480,2501],"[filterQuestionsMode, getAllQuestions, getAnsweredQuestions, getUnansweredQuestions, questions]"]