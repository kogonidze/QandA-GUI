[{"C:\\Users\\Admin\\source\\repos\\QandA\\frontend\\src\\index.tsx":"1","C:\\Users\\Admin\\source\\repos\\QandA\\frontend\\src\\reportWebVitals.ts":"2","C:\\Users\\Admin\\source\\repos\\QandA\\frontend\\src\\App.tsx":"3","C:\\Users\\Admin\\source\\repos\\QandA\\frontend\\src\\Styles.ts":"4","C:\\Users\\Admin\\source\\repos\\QandA\\frontend\\src\\Store.ts":"5","C:\\Users\\Admin\\source\\repos\\QandA\\frontend\\src\\NotFoundPage.tsx":"6","C:\\Users\\Admin\\source\\repos\\QandA\\frontend\\src\\SignInPage.tsx":"7","C:\\Users\\Admin\\source\\repos\\QandA\\frontend\\src\\SearchPage.tsx":"8","C:\\Users\\Admin\\source\\repos\\QandA\\frontend\\src\\QuestionPage.tsx":"9","C:\\Users\\Admin\\source\\repos\\QandA\\frontend\\src\\Header.tsx":"10","C:\\Users\\Admin\\source\\repos\\QandA\\frontend\\src\\HomePage.tsx":"11","C:\\Users\\Admin\\source\\repos\\QandA\\frontend\\src\\AskPage.tsx":"12","C:\\Users\\Admin\\source\\repos\\QandA\\frontend\\src\\QuestionsData.ts":"13","C:\\Users\\Admin\\source\\repos\\QandA\\frontend\\src\\Page.tsx":"14","C:\\Users\\Admin\\source\\repos\\QandA\\frontend\\src\\QuestionList.tsx":"15","C:\\Users\\Admin\\source\\repos\\QandA\\frontend\\src\\Field.tsx":"16","C:\\Users\\Admin\\source\\repos\\QandA\\frontend\\src\\AnswerList.tsx":"17","C:\\Users\\Admin\\source\\repos\\QandA\\frontend\\src\\Icons.tsx":"18","C:\\Users\\Admin\\source\\repos\\QandA\\frontend\\src\\PageTitle.tsx":"19","C:\\Users\\Admin\\source\\repos\\QandA\\frontend\\src\\Form.tsx":"20","C:\\Users\\Admin\\source\\repos\\QandA\\frontend\\src\\Question.tsx":"21","C:\\Users\\Admin\\source\\repos\\QandA\\frontend\\src\\Answer.tsx":"22","C:\\Users\\Admin\\source\\repos\\QandA\\frontend\\src\\http.ts":"23","C:\\Users\\Admin\\source\\repos\\QandA\\frontend\\src\\AppSettings.ts":"24"},{"size":501,"mtime":1609311046778,"results":"25","hashOfConfig":"26"},{"size":425,"mtime":499162500000,"results":"27","hashOfConfig":"26"},{"size":1907,"mtime":1610695094840,"results":"28","hashOfConfig":"26"},{"size":899,"mtime":1610695168016,"results":"29","hashOfConfig":"26"},{"size":3358,"mtime":1610695160502,"results":"30","hashOfConfig":"26"},{"size":126,"mtime":1609396501100,"results":"31","hashOfConfig":"26"},{"size":117,"mtime":1609396415292,"results":"32","hashOfConfig":"26"},{"size":1113,"mtime":1609396435229,"results":"33","hashOfConfig":"26"},{"size":5144,"mtime":1610695145854,"results":"34","hashOfConfig":"26"},{"size":2650,"mtime":1609850196346,"results":"35","hashOfConfig":"26"},{"size":2324,"mtime":1610695139284,"results":"36","hashOfConfig":"26"},{"size":2311,"mtime":1610695115850,"results":"37","hashOfConfig":"26"},{"size":3853,"mtime":1610703539984,"results":"38","hashOfConfig":"26"},{"size":443,"mtime":1609312113003,"results":"39","hashOfConfig":"26"},{"size":1109,"mtime":1609396481211,"results":"40","hashOfConfig":"26"},{"size":2841,"mtime":1610695106575,"results":"41","hashOfConfig":"26"},{"size":636,"mtime":1609396523879,"results":"42","hashOfConfig":"26"},{"size":282,"mtime":1609850396869,"results":"43","hashOfConfig":"26"},{"size":193,"mtime":1609396495981,"results":"44","hashOfConfig":"26"},{"size":5438,"mtime":1610695132154,"results":"45","hashOfConfig":"26"},{"size":1289,"mtime":1609850181192,"results":"46","hashOfConfig":"26"},{"size":740,"mtime":1609396527650,"results":"47","hashOfConfig":"26"},{"size":799,"mtime":1610702267698,"results":"48","hashOfConfig":"26"},{"size":343,"mtime":1610698906135,"results":"49","hashOfConfig":"26"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},"1kx4op",{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"52"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"52"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"52"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"52"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Admin\\source\\repos\\QandA\\frontend\\src\\index.tsx",[],["103","104"],"C:\\Users\\Admin\\source\\repos\\QandA\\frontend\\src\\reportWebVitals.ts",[],"C:\\Users\\Admin\\source\\repos\\QandA\\frontend\\src\\App.tsx",[],"C:\\Users\\Admin\\source\\repos\\QandA\\frontend\\src\\Styles.ts",[],"C:\\Users\\Admin\\source\\repos\\QandA\\frontend\\src\\Store.ts",[],"C:\\Users\\Admin\\source\\repos\\QandA\\frontend\\src\\NotFoundPage.tsx",[],"C:\\Users\\Admin\\source\\repos\\QandA\\frontend\\src\\SignInPage.tsx",[],"C:\\Users\\Admin\\source\\repos\\QandA\\frontend\\src\\SearchPage.tsx",[],"C:\\Users\\Admin\\source\\repos\\QandA\\frontend\\src\\QuestionPage.tsx",["105","106","107"],"import { FC, useState, Fragment, useEffect } from 'react';\nimport { Page } from './Page';\nimport { RouteComponentProps } from 'react-router-dom';\nimport {\n  QuestionData,\n  getQuestion,\n  postAnswer,\n  mapQuestionFromServer,\n  QuestionDataFromServer,\n} from './QuestionsData';\nimport { Form, required, minLength, Values } from './Form';\nimport { Field } from './Field';\nimport {\n  HubConnectionBuilder,\n  HubConnectionState,\n  HubConnection,\n  HttpTransportType,\n} from '@aspnet/signalr';\n\n/** @jsxRuntime classic */\n/** @jsx jsx */\nimport { css, jsx } from '@emotion/react';\nimport { gray2, gray3, gray6 } from './Styles';\nimport { AnswerList } from './AnswerList';\nimport { connect } from 'react-redux';\n\ninterface RouteParams {\n  questionId: string;\n}\n\nexport const QuestionPage: FC<RouteComponentProps<RouteParams>> = ({\n  match,\n}) => {\n  const [question, setQuestion] = useState<QuestionData | null>(null);\n  const setUpSignalRConnection = async (questionId: number) => {\n    const connection = new HubConnectionBuilder()\n      .withUrl('http://localhost:54089/questionshub')\n      .withAutomaticReconnect()\n      .build();\n\n    connection.on('Message', (message: string) => {\n      console.log('Message', message);\n    });\n\n    connection.on('ReceiveQuestion', (question: QuestionDataFromServer) => {\n      console.log('ReceiveQuestion', question);\n      setQuestion(mapQuestionFromServer(question));\n    });\n\n    try {\n      await connection.start();\n    } catch (err) {\n      console.log(err);\n    }\n\n    if (connection.state === HubConnectionState.Connected) {\n      connection.invoke('SubscribeQuestion', questionId).catch((err: Error) => {\n        return console.error(err.toString());\n      });\n    }\n\n    return connection;\n  };\n  const cleanUpSignalRConnection = async (\n    questionId: number,\n    connection: HubConnection,\n  ) => {\n    if (connection.state === HubConnectionState.Connected) {\n      try {\n        await connection.invoke('UnsubscribeQuestion', questionId);\n      } catch (err) {\n        return console.error(err.toString());\n      }\n\n      connection.off('Message');\n      connection.off('ReceiveQuestion');\n      connection.stop();\n    } else {\n      connection.off('Message');\n      connection.off('ReceiveQuestion');\n      connection.stop();\n    }\n  };\n\n  useEffect(() => {\n    const doGetQuestion = async (questionId: number) => {\n      const foundQuestion = await getQuestion(questionId);\n      setQuestion(foundQuestion);\n    };\n    let connection: HubConnection;\n\n    if (match.params.questionId) {\n      const questionId = Number(match.params.questionId);\n      doGetQuestion(questionId);\n      setUpSignalRConnection(questionId).then((con) => {\n        connection = con;\n      });\n    }\n\n    return function cleanUp() {\n      if (match.params.questionId) {\n        const questionId = Number(match.params.questionId);\n        cleanUpSignalRConnection(questionId, connection);\n      }\n    };\n  }, [match.params.questionId]);\n\n  const handleSubmit = async (values: Values) => {\n    const result = await postAnswer({\n      questionId: question!.questionId,\n      content: values.content,\n      userName: 'Fred',\n      created: new Date(),\n    });\n\n    return { success: result ? true : false };\n  };\n\n  return (\n    <Page>\n      <div\n        css={css`\n          background-color: white;\n          padding: 15px 20px 20px 20px;\n          border-radius: 4px;\n          border: 1px solid ${gray6};\n          box-shadow: 0 3px 5px 0 rgba(0, 0, 0, 0.16);\n        `}\n      >\n        <div\n          css={css`\n            font-size: 19px;\n            font-weight: bold;\n            margin: 10px 0px 5px;\n          `}\n        >\n          {question === null ? '' : question.title}\n        </div>\n        {question !== null && (\n          <Fragment>\n            <p\n              css={css`\n                margin-top: 0px;\n                background-color: white;\n              `}\n            >\n              {question.content}\n            </p>\n            <div\n              css={css`\n                font-size: 12px;\n                font-style: italic;\n                color: ${gray3};\n              `}\n            >\n              {`Asked by ${question.userName} on\n                ${question.created.toLocaleDateString()}\n                ${question.created.toLocaleTimeString()}`}\n            </div>\n            <AnswerList data={question.answers} />\n            <div\n              css={css`\n                margin-top: 20px;\n              `}\n            >\n              <Form\n                submitCaption=\"Submit Your Answer\"\n                validationRules={{\n                  content: [\n                    { validator: required },\n                    { validator: minLength, arg: 50 },\n                  ],\n                }}\n                onSubmit={handleSubmit}\n                failureMessage=\"There was a problem with your answer\"\n                successMessage=\"Your answer was successfully submitted\"\n              >\n                <Field name=\"content\" label=\"Your Answer\" type=\"TextArea\" />\n              </Form>\n            </div>\n          </Fragment>\n        )}\n      </div>\n    </Page>\n  );\n};\n","C:\\Users\\Admin\\source\\repos\\QandA\\frontend\\src\\Header.tsx",[],"C:\\Users\\Admin\\source\\repos\\QandA\\frontend\\src\\HomePage.tsx",["108"],"import React from 'react';\nimport { connect } from 'react-redux';\nimport { ThunkDispatch } from 'redux-thunk';\nimport { AnyAction } from 'redux';\nimport { useEffect, useState, FC } from 'react';\n/** @jsxRuntime classic */\n/** @jsx jsx */\nimport { css, jsx } from '@emotion/react';\nimport { PrimaryButton } from './Styles';\nimport { QuestionList } from './QuestionList';\nimport { QuestionData } from './QuestionsData';\nimport { Page } from './Page';\nimport { PageTitle } from './PageTitle';\nimport { RouteComponentProps } from 'react-router-dom';\nimport { AppState, getUnansweredQuestionsActionCreator } from './Store';\n\ninterface Props extends RouteComponentProps {\n  getUnansweredQuestions: () => Promise<void>;\n  questions: QuestionData[] | null;\n  questionsLoading: boolean;\n}\n\nconst HomePage: FC<Props> = ({\n  history,\n  questions,\n  questionsLoading,\n  getUnansweredQuestions,\n}) => {\n  useEffect(() => {\n    if (questions === null) {\n      getUnansweredQuestions();\n    }\n  }, [questions, getUnansweredQuestions]);\n\n  const handleAskQuestionClick = () => {\n    history.push('/ask');\n  };\n  return (\n    <Page>\n      <div\n        css={css`\n          margin: 50px auto 20px auto;\n          padding: 30px 20px;\n          max-width: 600px;\n        `}\n      >\n        <div\n          css={css`\n            display: flex;\n            align-items: center;\n            justify-content: space-between;\n          `}\n        >\n          <PageTitle>Unanswered Questions </PageTitle>\n          <PrimaryButton onClick={handleAskQuestionClick}>\n            Ask a question\n          </PrimaryButton>\n        </div>\n        {questionsLoading ? (\n          <div\n            css={css`\n              font-size: 16px;\n              font-style: italic;\n            `}\n          >\n            Loading\n          </div>\n        ) : (\n          <QuestionList data={questions || []} />\n        )}\n      </div>\n    </Page>\n  );\n};\n\nconst mapStateToProps = (store: AppState) => {\n  return {\n    questions: store.questions.unanswered,\n    questionsLoading: store.questions.loading,\n  };\n};\n\nconst mapDispatchToProps = (dispatch: ThunkDispatch<any, any, AnyAction>) => {\n  return {\n    getUnansweredQuestions: () =>\n      dispatch(getUnansweredQuestionsActionCreator()),\n  };\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(HomePage);\n","C:\\Users\\Admin\\source\\repos\\QandA\\frontend\\src\\AskPage.tsx",[],"C:\\Users\\Admin\\source\\repos\\QandA\\frontend\\src\\QuestionsData.ts",[],"C:\\Users\\Admin\\source\\repos\\QandA\\frontend\\src\\Page.tsx",[],"C:\\Users\\Admin\\source\\repos\\QandA\\frontend\\src\\QuestionList.tsx",[],"C:\\Users\\Admin\\source\\repos\\QandA\\frontend\\src\\Field.tsx",["109"],"import { FC, useContext, ChangeEvent } from 'react';\nimport { FormContext } from './Form';\n/** @jsxRuntime classic */\n/** @jsx jsx */\nimport { css, jsx } from '@emotion/react';\nimport { fontFamily, fontSize, gray5, gray2, gray6 } from './Styles';\nimport { addSyntheticLeadingComment } from 'typescript';\n\ninterface Props {\n  name: string;\n  label?: string;\n  type?: 'Text' | 'TextArea' | 'Password';\n}\n\nconst baseCSS = css`\n  box-sizing: border-box;\n  font-family: ${fontFamily};\n  font-size: ${fontSize};\n  margin-bottom: 5px;\n  padding: 8px 10px;\n  border: 1px solid ${gray5};\n  border-radius: 3px;\n  color: ${gray2};\n  background-color: white;\n  width: 100%;\n  :focus {\n    outline-color: ${gray5};\n  }\n  :disabled {\n    background-color: ${gray6};\n  }\n`;\n\nexport const Field: FC<Props> = ({ name, label, type = 'Text' }) => {\n  const { setValue, touched, setTouched, validate } = useContext(FormContext);\n  const handleChange = (\n    e: ChangeEvent<HTMLInputElement> | ChangeEvent<HTMLTextAreaElement>,\n  ) => {\n    if (setValue) {\n      setValue(name, e.currentTarget.value);\n    }\n    if (touched[name]) {\n      if (validate) {\n        validate(name);\n      }\n    }\n  };\n\n  const handleBlur = () => {\n    if (setTouched) {\n      setTouched(name);\n    }\n    if (validate) {\n      validate(name);\n    }\n  };\n  return (\n    <FormContext.Consumer>\n      {({ values, errors }) => (\n        <div\n          css={css`\n            display: flex;\n            flex-direction: column;\n            margin-bottom: 15px;\n          `}\n        >\n          {label && (\n            <label\n              css={css`\n                font-weight: bold;\n              `}\n              htmlFor={name}\n            >\n              {label}\n            </label>\n          )}\n          {(type === 'Text' || type === 'Password') && (\n            <input\n              type={type.toLowerCase()}\n              id={name}\n              value={values[name] === undefined ? '' : values[name]}\n              onChange={handleChange}\n              onBlur={handleBlur}\n              css={baseCSS}\n            />\n          )}\n          {type === 'TextArea' && (\n            <textarea\n              id={name}\n              value={values[name] === undefined ? '' : values[name]}\n              onChange={handleChange}\n              onBlur={handleBlur}\n              css={css`\n                ${baseCSS};\n                height: 100px;\n              `}\n            />\n          )}\n          {errors[name] &&\n            errors[name].length > 0 &&\n            errors[name].map((error) => (\n              <div\n                key={error}\n                css={css`\n                  font-size: 12px;\n                  color: red;\n                `}\n              >\n                {error}\n              </div>\n            ))}\n        </div>\n      )}\n    </FormContext.Consumer>\n  );\n};\n","C:\\Users\\Admin\\source\\repos\\QandA\\frontend\\src\\AnswerList.tsx",[],"C:\\Users\\Admin\\source\\repos\\QandA\\frontend\\src\\Icons.tsx",[],"C:\\Users\\Admin\\source\\repos\\QandA\\frontend\\src\\PageTitle.tsx",[],"C:\\Users\\Admin\\source\\repos\\QandA\\frontend\\src\\Form.tsx",["110"],"import { FC, useState, createContext, FormEvent } from 'react';\nimport { PrimaryButton, gray5, gray6 } from './Styles';\n/** @jsxRuntime classic */\n/** @jsx jsx */\nimport { css, jsx } from '@emotion/react';\nimport { StringifyOptions } from 'querystring';\n\nexport interface Values {\n  [key: string]: any;\n}\n\nexport interface Errors {\n  [key: string]: string[];\n}\n\nexport interface Touched {\n  [key: string]: boolean;\n}\n\ninterface FormContextProps {\n  values: Values;\n  setValue?: (fieldName: string, value: any) => void;\n  errors: Errors;\n  validate?: (fieldName: string) => void;\n  touched: Touched;\n  setTouched?: (fieldName: string) => void;\n}\n\nexport const FormContext = createContext<FormContextProps>({\n  values: {},\n  errors: {},\n  touched: {},\n});\n\ntype Validator = (value: any, args?: any) => string;\n\nexport const required: Validator = (value: any): string =>\n  value === undefined || value === null || value === ''\n    ? 'This must be populated'\n    : '';\n\nexport const minLength: Validator = (value: any, length: number): string =>\n  value && value.length < length\n    ? `This must be at least ${length} characters`\n    : '';\n\ninterface Validation {\n  validator: Validator;\n  arg?: any;\n}\n\ninterface ValidationProp {\n  [key: string]: Validation | Validation[];\n}\n\nexport interface SubmitResult {\n  success: boolean;\n  errors?: Errors;\n}\n\ninterface Props {\n  submitCaption?: string;\n  validationRules?: ValidationProp;\n  onSubmit: (values: Values) => Promise<SubmitResult> | void;\n  submitResult?: SubmitResult;\n  successMessage?: string;\n  failureMessage?: string;\n}\n\nexport const Form: FC<Props> = ({\n  submitCaption,\n  children,\n  validationRules,\n  onSubmit,\n  submitResult,\n  successMessage = 'Success!',\n  failureMessage = 'Something went wrong',\n}) => {\n  const [values, setValues] = useState<Values>({});\n  const [errors, setErrors] = useState<Errors>({});\n  const [touched, setTouched] = useState<Touched>({});\n  const [submitting, setSubmitting] = useState(false);\n  const [submitted, setSubmitted] = useState(false);\n  const [submitError, setSubmitError] = useState(false);\n\n  const validate = (fieldName: string): string[] => {\n    if (!validationRules) {\n      return [];\n    }\n    if (!validationRules[fieldName]) {\n      return [];\n    }\n\n    const rules = Array.isArray(validationRules[fieldName])\n      ? (validationRules[fieldName] as Validation[])\n      : ([validationRules[fieldName]] as Validation[]);\n    const fieldErrors: string[] = [];\n    rules.forEach((rule) => {\n      const error = rule.validator(values[fieldName], rule.arg);\n      if (error) {\n        fieldErrors.push(error);\n      }\n    });\n    const newErrors = { ...errors, [fieldName]: fieldErrors };\n    setErrors(newErrors);\n    return fieldErrors;\n  };\n\n  const handleSubmit = async (e: FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    if (validateForm()) {\n      setSubmitting(true);\n      setSubmitError(false);\n      const result = await onSubmit(values);\n\n      // The result may be passed through as a prop\n      if (result === undefined) {\n        return;\n      }\n\n      setErrors(result.errors || {});\n      setSubmitError(!result.success);\n      setSubmitting(false);\n      setSubmitted(true);\n    }\n  };\n\n  const validateForm = () => {\n    const newErrors: Errors = {};\n    let haveError: boolean = false;\n    if (validationRules) {\n      Object.keys(validationRules).forEach((fieldName) => {\n        newErrors[fieldName] = validate(fieldName);\n        if (newErrors[fieldName].length > 0) {\n          haveError = true;\n        }\n      });\n    }\n    setErrors(newErrors);\n    return !haveError;\n  };\n\n  const disabled = submitResult\n    ? submitResult.success\n    : submitting || (submitted && !submitError);\n  const showError = submitResult\n    ? !submitResult.success\n    : submitted && submitError;\n  const showSuccess = submitResult\n    ? submitResult.success\n    : submitted && !submitError;\n\n  return (\n    <FormContext.Provider\n      value={{\n        values,\n        setValue: (fieldName: string, value: any) => {\n          setValues({ ...values, [fieldName]: value });\n        },\n        errors,\n        validate,\n        touched,\n        setTouched: (fieldName: string) => {\n          setTouched({ ...touched, [fieldName]: true });\n        },\n      }}\n    >\n      <form noValidate={true} onSubmit={handleSubmit}>\n        <fieldset\n          disabled={disabled}\n          css={css`\n            margin: 10px auto 0 auto;\n            padding: 30px;\n            width: 350px;\n            background-color: ${gray6};\n            border-radius: 4px;\n            border: 1px solid ${gray5};\n            box-shadow: 0 3px 5px 0 rgba(0, 0, 0, 0.16);\n          `}\n        >\n          {children}\n          <div\n            css={css`\n              margin: 30px 0px 0px 0px;\n              padding: 20px 0px 0px 0px;\n              border-top: 1px solid ${gray5};\n            `}\n          >\n            <PrimaryButton type=\"submit\">{submitCaption}</PrimaryButton>\n          </div>\n          {showError && (\n            <p\n              css={css`\n                color: red;\n              `}\n            >\n              {failureMessage}\n            </p>\n          )}\n          {showSuccess && (\n            <p\n              css={css`\n                color: green;\n              `}\n            >\n              {successMessage}\n            </p>\n          )}\n        </fieldset>\n      </form>\n    </FormContext.Provider>\n  );\n};\n","C:\\Users\\Admin\\source\\repos\\QandA\\frontend\\src\\Question.tsx",[],"C:\\Users\\Admin\\source\\repos\\QandA\\frontend\\src\\Answer.tsx",[],"C:\\Users\\Admin\\source\\repos\\QandA\\frontend\\src\\http.ts",["111"],"C:\\Users\\Admin\\source\\repos\\QandA\\frontend\\src\\AppSettings.ts",[],{"ruleId":"112","replacedBy":"113"},{"ruleId":"114","replacedBy":"115"},{"ruleId":"116","severity":1,"message":"117","line":17,"column":3,"nodeType":"118","messageId":"119","endLine":17,"endColumn":20},{"ruleId":"116","severity":1,"message":"120","line":23,"column":10,"nodeType":"118","messageId":"119","endLine":23,"endColumn":15},{"ruleId":"116","severity":1,"message":"121","line":25,"column":10,"nodeType":"118","messageId":"119","endLine":25,"endColumn":17},{"ruleId":"116","severity":1,"message":"122","line":5,"column":21,"nodeType":"118","messageId":"119","endLine":5,"endColumn":29},{"ruleId":"116","severity":1,"message":"123","line":7,"column":10,"nodeType":"118","messageId":"119","endLine":7,"endColumn":36},{"ruleId":"116","severity":1,"message":"124","line":6,"column":10,"nodeType":"118","messageId":"119","endLine":6,"endColumn":26},{"ruleId":"116","severity":1,"message":"125","line":3,"column":30,"nodeType":"118","messageId":"119","endLine":3,"endColumn":34},"no-native-reassign",["126"],"no-negated-in-lhs",["127"],"@typescript-eslint/no-unused-vars","'HttpTransportType' is defined but never used.","Identifier","unusedVar","'gray2' is defined but never used.","'connect' is defined but never used.","'useState' is defined but never used.","'addSyntheticLeadingComment' is defined but never used.","'StringifyOptions' is defined but never used.","'REQB' is defined but never used.","no-global-assign","no-unsafe-negation"]